// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  chats    Chat[]
  images   Image[]
}

model Chat {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @map(name: "user_id")

  messages Message[]
}

enum Role {
  user
  system
  assistant
}

model Message {
  id        String   @id @default(uuid())
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map(name: "user_id")

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @map(name: "chat_id")
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actors Actor[]
}

model Actor {
  id        String   @id @default(uuid())
  title     String
  iconUrl   String
  remark    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String @map(name: "tag_id")
}

model Image {
  id       String @id @default(uuid())
  prompt   String
  filename String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map(name: "user_id")
}
